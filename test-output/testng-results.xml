<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="15" passed="14" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-09-04T12:19:36 IST" name="FlipkartAutomationSuite" finished-at="2025-09-04T12:23:30 IST" duration-ms="234425">
    <groups>
    </groups>
    <test started-at="2025-09-04T12:19:36 IST" name="Flipkart Tests - Chrome" finished-at="2025-09-04T12:23:30 IST" duration-ms="234425">
      <class name="tests.LoginTest">
        <test-method is-config="true" signature="setUp(java.lang.String)[pri:0, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:19:36 IST" name="setUp" finished-at="2025-09-04T12:19:42 IST" duration-ms="6424" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="resetState()[pri:0, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:19:42 IST" name="resetState" finished-at="2025-09-04T12:19:52 IST" duration-ms="10056" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- resetState -->
        <test-method signature="invalidPhoneShouldFail()[pri:1, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:19:52 IST" name="invalidPhoneShouldFail" description="Should fail if phone number is invalid" finished-at="2025-09-04T12:20:06 IST" duration-ms="13491" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidPhoneShouldFail -->
        <test-method is-config="true" signature="resetState()[pri:0, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:20:06 IST" name="resetState" finished-at="2025-09-04T12:20:16 IST" duration-ms="10039" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- resetState -->
        <test-method signature="invalidOtpShouldFail()[pri:2, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:20:16 IST" name="invalidOtpShouldFail" description="Should fail if OTP entered is invalid" finished-at="2025-09-04T12:20:40 IST" duration-ms="23958" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidOtpShouldFail -->
        <test-method is-config="true" signature="resetState()[pri:0, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:20:40 IST" name="resetState" finished-at="2025-09-04T12:20:50 IST" duration-ms="10045" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- resetState -->
        <test-method signature="validOtpShouldPass()[pri:3, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:20:50 IST" name="validOtpShouldPass" description="Should pass if OTP is valid" finished-at="2025-09-04T12:21:25 IST" duration-ms="35410" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validOtpShouldPass -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@17d919b6]" started-at="2025-09-04T12:21:25 IST" name="tearDown" finished-at="2025-09-04T12:21:26 IST" duration-ms="442" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LoginTest -->
      <class name="tests.CartTest">
        <test-method is-config="true" signature="setUp(java.lang.String)[pri:0, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:22:39 IST" name="setUp" finished-at="2025-09-04T12:22:44 IST" duration-ms="4807" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAddToCart()[pri:1, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:22:44 IST" name="testAddToCart" description="Add product to cart from details page" finished-at="2025-09-04T12:23:07 IST" duration-ms="22830" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddToCart -->
        <test-method signature="testModifyQuantity()[pri:2, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:23:07 IST" name="testModifyQuantity" description="Modify quantity in cart and verify price update" finished-at="2025-09-04T12:23:13 IST" duration-ms="5648" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testModifyQuantity -->
        <test-method signature="testRemoveItem()[pri:3, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:23:13 IST" name="testRemoveItem" description="Remove item from cart and confirm removal" finished-at="2025-09-04T12:23:14 IST" duration-ms="1041" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveItem -->
        <test-method signature="testProceedToBuy()[pri:4, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:23:14 IST" name="testProceedToBuy" description="Proceed to buy and check address/payment steps" finished-at="2025-09-04T12:23:28 IST" duration-ms="13807" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProceedToBuy -->
        <test-method signature="testOrderWithoutAddressPayment()[pri:5, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:23:28 IST" name="testOrderWithoutAddressPayment" description="Try placing order without address or payment" finished-at="2025-09-04T12:23:30 IST" duration-ms="2159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderWithoutAddressPayment -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.CartTest@3e62d773]" started-at="2025-09-04T12:23:30 IST" name="tearDown" finished-at="2025-09-04T12:23:30 IST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.CartTest -->
      <class name="tests.ProductTest">
        <test-method is-config="true" signature="setUp(java.lang.String)[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:26 IST" name="setUp" finished-at="2025-09-04T12:21:33 IST" duration-ms="7342" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSearchProduct()[pri:1, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:33 IST" name="testSearchProduct" description="Search for mobile phone" finished-at="2025-09-04T12:21:41 IST" duration-ms="7783" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchProduct -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:41 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:21:48 IST" duration-ms="7007" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method signature="testFilterByBrand()[pri:2, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:48 IST" name="testFilterByBrand" description="Apply brand filter" finished-at="2025-09-04T12:21:49 IST" duration-ms="1187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFilterByBrand -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:49 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:21:56 IST" duration-ms="7015" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method signature="testFilterByRAM()[pri:3, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:56 IST" name="testFilterByRAM" description="Apply RAM filter" finished-at="2025-09-04T12:21:57 IST" duration-ms="1239" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: stale element not found in the current frame
  (Session info: chrome=139.0.7258.155)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.6'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d18b79f58daf9746f541b88449a55546, isElementDisplayed {id=f.8274BB014A5AE8AC741670E6EA9A12AE.d.F5BB3594CEB80880EC6E7FFE16D9B3C4.e.473}]
Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 139.0.7258.155, chrome: {chromedriverVersion: 139.0.7258.154 (9e0d6b2b47f..., userDataDir: C:\Users\nirma\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:52891}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:52891/devtoo..., se:cdpVersion: 139.0.7258.155, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (d18b79f58daf9746f541b88449a55546)] -> xpath: //a[@class='CGtC98']]
Session ID: d18b79f58daf9746f541b88449a55546]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: stale element not found in the current frame
  (Session info: chrome=139.0.7258.155)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception
Build info: version: '4.20.0', revision: '866c76ca80'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.6'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [d18b79f58daf9746f541b88449a55546, isElementDisplayed {id=f.8274BB014A5AE8AC741670E6EA9A12AE.d.F5BB3594CEB80880EC6E7FFE16D9B3C4.e.473}]
Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 139.0.7258.155, chrome: {chromedriverVersion: 139.0.7258.154 (9e0d6b2b47f..., userDataDir: C:\Users\nirma\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:52891}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:52891/devtoo..., se:cdpVersion: 139.0.7258.155, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (d18b79f58daf9746f541b88449a55546)] -> xpath: //a[@class='CGtC98']]
Session ID: d18b79f58daf9746f541b88449a55546
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:223)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:282)
at org.openqa.selenium.support.ui.ExpectedConditions$8.apply(ExpectedConditions.java:223)
at org.openqa.selenium.support.ui.ExpectedConditions$8.apply(ExpectedConditions.java:218)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at pages.ProductPage.filterByRAM(ProductPage.java:69)
at tests.ProductTest.testFilterByRAM(ProductTest.java:52)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFilterByRAM -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:21:57 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:22:04 IST" duration-ms="7029" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method signature="testFilterByPrice()[pri:4, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:04 IST" name="testFilterByPrice" description="Apply price range filter" finished-at="2025-09-04T12:22:05 IST" duration-ms="1036" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFilterByPrice -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:05 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:22:12 IST" duration-ms="7017" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method signature="testSortByPriceLowToHigh()[pri:5, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:12 IST" name="testSortByPriceLowToHigh" description="Sort results by price low to high" finished-at="2025-09-04T12:22:13 IST" duration-ms="609" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSortByPriceLowToHigh -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:13 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:22:20 IST" duration-ms="7007" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method signature="testProductDetails()[pri:6, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:20 IST" name="testProductDetails" description="Open product details page and check specifications" finished-at="2025-09-04T12:22:25 IST" duration-ms="4724" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProductDetails -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:25 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:22:32 IST" duration-ms="7016" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method signature="testSearchWithoutKeyword()[pri:7, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:32 IST" name="testSearchWithoutKeyword" description="Search without keyword" finished-at="2025-09-04T12:22:32 IST" duration-ms="376" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchWithoutKeyword -->
        <test-method is-config="true" signature="waitAfterEachTest()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:32 IST" name="waitAfterEachTest" finished-at="2025-09-04T12:22:39 IST" duration-ms="7012" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitAfterEachTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.ProductTest@4c2bb6e0]" started-at="2025-09-04T12:22:39 IST" name="tearDown" finished-at="2025-09-04T12:22:39 IST" duration-ms="423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ProductTest -->
    </test> <!-- Flipkart Tests - Chrome -->
  </suite> <!-- FlipkartAutomationSuite -->
</testng-results>
